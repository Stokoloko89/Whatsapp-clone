// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: az4W6VXcp4Uq4NJ5GtxTg5
// Component: U6Sh9QLZn0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ChatListItem from "../../ChatListItem"; // plasmic-import: uqUraSuaqp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_whatsapp_chat_app.module.css"; // plasmic-import: az4W6VXcp4Uq4NJ5GtxTg5/projectcss
import sty from "./PlasmicChatList.module.css"; // plasmic-import: U6Sh9QLZn0/css
import Rolling1S200PxsvgIcon from "./icons/PlasmicIcon__Rolling1S200Pxsvg"; // plasmic-import: gr_4w0Fso/icon

export const PlasmicChatList__VariantProps = new Array("isLoading");

export const PlasmicChatList__ArgProps = new Array();

export const defaultChatList__Args = {};

function PlasmicChatList__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultChatList__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"chatListWrapper"}
          data-plasmic-override={overrides.chatListWrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.chatListWrapper, {
            [sty.chatListWrapperisLoading]: hasVariant(
              variants,
              "isLoading",
              "isLoading"
            )
          })}
        >
          {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
            <ChatListItem
              data-plasmic-name={"chatListItem"}
              data-plasmic-override={overrides.chatListItem}
              className={classNames("__wab_instance", sty.chatListItem, {
                [sty.chatListItemisLoading]: hasVariant(
                  variants,
                  "isLoading",
                  "isLoading"
                )
              })}
            />
          ) : null}
          {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
            <Rolling1S200PxsvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgisLoading]: hasVariant(
                  variants,
                  "isLoading",
                  "isLoading"
                )
              })}
              role={"img"}
            />
          ) : null}
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "chatListWrapper", "chatListItem", "svg"],
  chatListWrapper: ["chatListWrapper", "chatListItem", "svg"],
  chatListItem: ["chatListItem"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChatList__ArgProps,
      internalVariantPropNames: PlasmicChatList__VariantProps
    });

    return PlasmicChatList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatList";
  } else {
    func.displayName = `PlasmicChatList.${nodeName}`;
  }
  return func;
}

export const PlasmicChatList = Object.assign(
  // Top-level PlasmicChatList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chatListWrapper: makeNodeComponent("chatListWrapper"),
    chatListItem: makeNodeComponent("chatListItem"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicChatList
    internalVariantProps: PlasmicChatList__VariantProps,
    internalArgProps: PlasmicChatList__ArgProps
  }
);

export default PlasmicChatList;
/* prettier-ignore-end */
