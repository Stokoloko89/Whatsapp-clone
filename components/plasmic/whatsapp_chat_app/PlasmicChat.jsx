// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: az4W6VXcp4Uq4NJ5GtxTg5
// Component: fP7sqRD_6i
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: vXSjmOQDKr/component
import ChatMessage from "../../ChatMessage"; // plasmic-import: bTfmYOGtaw/component
import TextInput from "../../TextInput"; // plasmic-import: 2MaJyIaWIXg/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_whatsapp_chat_app.module.css"; // plasmic-import: az4W6VXcp4Uq4NJ5GtxTg5/projectcss
import sty from "./PlasmicChat.module.css"; // plasmic-import: fP7sqRD_6i/css
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: KFyYOJgDmT/icon

export const PlasmicChat__VariantProps = new Array();

export const PlasmicChat__ArgProps = new Array("roomName");

export const defaultChat__Args = {};

function PlasmicChat__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultChat__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        hasGap={true}
        className={classNames(projectcss.all, sty.header)}
      >
        <Avatar
          data-plasmic-name={"roomAvatar"}
          data-plasmic-override={overrides.roomAvatar}
          className={classNames("__wab_instance", sty.roomAvatar)}
          size={"_60"}
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.roomName,
            className: classNames(sty.slotTargetRoomName)
          })}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(projectcss.all, sty.body)}
      >
        <ChatMessage
          className={classNames("__wab_instance", sty.chatMessage__c8Eeb)}
          content={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oAUV
              )}
            >
              {
                "asdasdsaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"
              }
            </div>
          }
        />

        <ChatMessage
          className={classNames("__wab_instance", sty.chatMessage__sX2OW)}
          content={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eUfL
              )}
            >
              {
                "asdasdsaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"
              }
            </div>
          }
          isSent={true}
        />

        <ChatMessage
          className={classNames("__wab_instance", sty.chatMessage__qe1GE)}
          content={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pEvlE
              )}
            >
              {
                "asdasdsaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"
              }
            </div>
          }
        />

        <ChatMessage
          className={classNames("__wab_instance", sty.chatMessage__bdf3O)}
          content={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sN5Yi
              )}
            >
              {
                "asdasdsaLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"
              }
            </div>
          }
        />

        <ChatMessage
          className={classNames("__wab_instance", sty.chatMessage__wc2Rt)}
        />

        <ChatMessage
          className={classNames("__wab_instance", sty.chatMessage__pNj9)}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        hasGap={true}
        className={classNames(projectcss.all, sty.footer)}
      >
        <TextInput
          data-plasmic-name={"messageTextInput"}
          data-plasmic-override={overrides.messageTextInput}
          className={classNames("__wab_instance", sty.messageTextInput)}
          placeholder={"Type your message here..."}
        />

        <Vector2Icon
          data-plasmic-name={"sendIcon"}
          data-plasmic-override={overrides.sendIcon}
          className={classNames(projectcss.all, sty.sendIcon)}
          role={"img"}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "roomAvatar",
    "freeBox",
    "body",
    "footer",
    "messageTextInput",
    "sendIcon"
  ],

  header: ["header", "roomAvatar", "freeBox"],
  roomAvatar: ["roomAvatar"],
  freeBox: ["freeBox"],
  body: ["body"],
  footer: ["footer", "messageTextInput", "sendIcon"],
  messageTextInput: ["messageTextInput"],
  sendIcon: ["sendIcon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChat__ArgProps,
      internalVariantPropNames: PlasmicChat__VariantProps
    });

    return PlasmicChat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChat";
  } else {
    func.displayName = `PlasmicChat.${nodeName}`;
  }
  return func;
}

export const PlasmicChat = Object.assign(
  // Top-level PlasmicChat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    roomAvatar: makeNodeComponent("roomAvatar"),
    freeBox: makeNodeComponent("freeBox"),
    body: makeNodeComponent("body"),
    footer: makeNodeComponent("footer"),
    messageTextInput: makeNodeComponent("messageTextInput"),
    sendIcon: makeNodeComponent("sendIcon"),
    // Metadata about props expected for PlasmicChat
    internalVariantProps: PlasmicChat__VariantProps,
    internalArgProps: PlasmicChat__ArgProps
  }
);

export default PlasmicChat;
/* prettier-ignore-end */
